
Процедура ОбработкаПроведения(Отказ, Режим)
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	// регистр Продажи 
	Движения.Продажи.Записывать = Истина;
	Для Каждого ТекСтрокаПокупка Из Покупка Цикл
		Движение = Движения.Продажи.Добавить();
		Движение.Период = Дата;
		Движение.Номенклатура = ТекСтрокаПокупка.Номенклатура;
		Движение.Клиент = Клиент;
		Движение.ТорговаяТочка = ТорговаяТочка;
		Движение.Продавец = Продавец;
		Движение.Количество = ТекСтрокаПокупка.Количество;
		Движение.Выручка = ТекСтрокаПокупка.Сумма;
		Движение.Стоимость = ТекСтрокаПокупка.Стоимость;
	КонецЦикла;

	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	
	Движения.Продажи.Записывать = Истина;	
	Движения.ОстаткиПродуктов.Записывать = Истина;
	Движения.СтоимостьПродуктов.Записывать = Истина;

	Для Каждого ТекСтрокаПокупка Из Покупка Цикл      
		Если ТекСтрокаПокупка.Номенклатура.ВидНоменклатуры = Перечисления.ВидыНоменклатуры.Продукт Тогда
			
			// регистр ОстаткиПродуктов Расход
			Движение = Движения.ОстаткиПродуктов.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Продукт = ТекСтрокаПокупка.Номенклатура;
			Движение.ТорговаяТочка = ТорговаяТочка;
			Движение.НаборСвойств = ТекСтрокаПокупка.НаборСвойств;
			Движение.Количество = ТекСтрокаПокупка.Количество;    

			// регистр СтоимостьПродуктов Расход
			Движение = Движения.СтоимостьПродуктов.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.Период = Дата;
			Движение.Продукт = ТекСтрокаПокупка.Номенклатура;
			Движение.Стоимость = ТекСтрокаПокупка.Количество*ТекСтрокаПокупка.Стоимость;

			// регистр Продажи 
			Движение = Движения.Продажи.Добавить();
			Движение.Период = Дата;
			Движение.Номенклатура = ТекСтрокаПокупка.Номенклатура;
			Движение.Клиент = Клиент;
			Движение.ТорговаяТочка = ТорговаяТочка;
			Движение.Продавец = Продавец;
			Движение.Количество = ТекСтрокаПокупка.Количество;
			Движение.Выручка = ТекСтрокаПокупка.Сумма;
			Движение.Стоимость = ТекСтрокаПокупка.Стоимость * ТекСтрокаПокупка.Количество;  
						
		КонецЕсли;
	КонецЦикла;



КонецПроцедуры

//Процедура ОбработкаПроведения(Отказ, Режим)
//	
//	Движения.СкидкиНаПродукцию.Записывать = Истина;
//	Движения.ОстаткиПродукции.Записывать = Истина; 
//	Движения.ПродажиТорговыхТочек.Записывать = Истина;
//	Движения.СебестоимостьПродукции.Записывать = Истина;
//	
//	//Создать менеджер временных таблиц. 
//	МенеджерВТ = Новый МенеджерВременныхТаблиц; 
//	Запрос = Новый Запрос; 
//	//Укажем, какой менеджер временных таблиц использует этот запрос 
//	Запрос.МенеджерВременныхТаблиц = МенеджерВТ; 
//	
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ОплатаЧерезКассуПокупка.Номенклатура.ВидПродукции КАК ВидПродукции,
//	|	ОплатаЧерезКассуПокупка.Номенклатура,
//	|	ОплатаЧерезКассуПокупка.НаборСвойств,
//	|	СУММА(ОплатаЧерезКассуПокупка.Количество) КАК КоличествоВДокументе,
//	|	СУММА(ОплатаЧерезКассуПокупка.Сумма) КАК СуммаВДокументе,
//	|	СУММА(ОплатаЧерезКассуПокупка.Скидка) КАК Скидка
//	|ПОМЕСТИТЬ ПродукцияДокумента
//	|ИЗ
//	|	Документ.ОплатаЧерезКассу.Покупка КАК ОплатаЧерезКассуПокупка
//	|ГДЕ
//	|	ОплатаЧерезКассуПокупка.Ссылка = &Ссылка
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ОплатаЧерезКассуПокупка.Номенклатура,
//	|	ОплатаЧерезКассуПокупка.Номенклатура.ВидПродукции,
//	|	ОплатаЧерезКассуПокупка.НаборСвойств";
//	
//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
//	
//	РезультатЗапроса = Запрос.Выполнить();
//	
//	Запрос2 = Новый Запрос; 
//	Запрос2.МенеджерВременныхТаблиц = МенеджерВТ; 
//	Запрос2.Текст = "ВЫБРАТЬ
//	|	ПродукцияДокумента.Номенклатура,
//	|	ПродукцияДокумента.ВидПродукции,
//	|	ПродукцияДокумента.КоличествоВДокументе,
//	|	ПродукцияДокумента.СуммаВДокументе,
//	|	ЕСТЬNULL(ОстаткиПродукцииОстатки.КоличествоОстаток, 0) КАК Количество,
//	|	ЕСТЬNULL(СебестоимостьПродукцииОстатки.СебестоимостьОстаток, 0) КАК Себестоимость
//	|ИЗ
//	|	ПродукцияДокумента КАК ПродукцияДокумента
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьПродукции.Остатки(
//	|				,
//	|				Номенклатура В
//	|					(ВЫБРАТЬ
//	|						ПродукцияДокумента.Номенклатура
//	|					ИЗ
//	|						ПродукцияДокумента)) КАК СебестоимостьПродукцииОстатки
//	|		ПО ПродукцияДокумента.Номенклатура = СебестоимостьПродукцииОстатки.Номенклатура
//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПродуктов.Остатки КАК ОстаткиПродукцииОстатки
//	|		ПО ПродукцияДокумента.Продукт = ОстаткиПродукцииОстатки.Номенклатура";
//	
//	
//	//Запишем пустые наборы записей, чтобы читать остатки без учета данных в документе. 
//	Движения.СебестоимостьМатериалов.Записать(); 
//	Движения.ОстаткиМатериалов.Записать(); 
//	
//	РезультатЗапроса = Запрос2.Выполнить();
//	
//	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл        
//		Если ВыборкаДетальныеЗаписи.Количество = 0 Тогда 
//			СебестоимостьПродукции = 0; 
//		Иначе 
//			СебестоимостьПродукции = ВыборкаДетальныеЗаписи.Стоимость/ВыборкаДетальныеЗаписи.Количество; 
//		КонецЕсли;
//		
//		
//		Если ВыборкаДетальныеЗаписи.Продукция.ВидПродукции = Перечисления.ВидыПродукции.ГотоваяПродукция Тогда		
//			// регистр ОстаткиПродукции Расход
//			Движение = Движения.ОстаткиПродукции.Добавить();
//			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Движение.Период = Дата;
//			Движение.Продукт = ВыборкаДетальныеЗаписи.Продукция;
//			Движение.ТорговаяТочка = ТорговаяТочка;   
//			Движение.НаборСвойств = ВыборкаДетальныеЗаписи.НаборСвойств;
//			Движение.Количество = ВыборкаДетальныеЗаписи.КоличествоВДокументе ;     
//			
//			
//			// регистр СебестоимостьПродукции Расход
//			Движение = Движения.СебестоимостьПродукции.Добавить();
//			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
//			Движение.Период = Дата;
//			Движение.Продукция = ВыборкаДетальныеЗаписи.Продукция;
//			Движение.Себестоимость = СебестоимостьПродукции * ВыборкаДетальныеЗаписи.КоличествоВДокументе;
//			
//			
//			// регистр ПродажиТорговыхТочек 
//			Движение = Движения.ПродажиТорговыхТочек.Добавить();
//			Движение.Период = Дата;
//			Движение.Продукция = ВыборкаДетальныеЗаписи.Продукция;
//			Движение.Банк = Клиент;
//			Движение.ОбъектПредприятия = ТорговаяТочка;
//			Движение.Количество = ВыборкаДетальныеЗаписи.КоличествоВДокументе;
//			Движение.Выручка = ВыборкаДетальныеЗаписи.СуммаВДокументе;
//			Движение.Себестоимость = СебестоимостьПродукции * ВыборкаДетальныеЗаписи.КоличествоВДокументе;    
//		КонецЕсли;	  
//		
//		// регистр СкидкиНаПродукцию Приход                         
//		Если ВыборкаДетальныеЗаписи.Скидка > 0 Тогда
//			Движение = Движения.СкидкиНаПродукцию.Добавить();
//			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
//			Движение.Период = Дата;
//			Движение.Продукция = ВыборкаДетальныеЗаписи.Продукция;
//			Движение.Скидка = ВыборкаДетальныеЗаписи.Скидка * ВыборкаДетальныеЗаписи.КоличествоВДокументе;
//		КонецЕсли;
//	КонецЦикла;     
//	
//	Движения.Записать(); 
//	Если Режим = РежимПроведенияДокумента.Оперативный Тогда 
//		//проверить отрицательные остатки. 
//		Запрос3 = Новый Запрос; 
//		Запрос3.МенеджерВременныхТаблиц = МенеджерВТ; 
//		Запрос3.Текст = "ВЫБРАТЬ
//		                |	ОстаткиПродукцииОстатки.Номенклатура,
//		                |	ОстаткиПродукцииОстатки.КоличествоОстаток
//		                |ИЗ
//		                |	РегистрНакопления.ОстаткиПродуктов.Остатки(
//		                |			,
//		                |			Номенклатура В
//		                |					(ВЫБРАТЬ
//		                |						ПродукцияДокумента.Номенклатура
//		                |					ИЗ
//		                |						ПродукцияДокумента)
//		                |				И ТорговаяТочка = &ТорговаяТочка) КАК ОстаткиПродукцииОстатки"; 
//	КонецЕсли;
//	
//КонецПроцедуры





